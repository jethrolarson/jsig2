-- vim: set ft=Haskell:
type Error : {
    message: String,
    stack: String,
    name: String,
    ..R
}

type TArray : {
    length: Number,
    push: <T>(this: Array<T>, T) => Number,
    slice: <T>(this: Array<T>, Number, Number) => Array<T>
}

type TString : {
    length: Number,
    split: (this: String, String) => Array<String>,
    replace: (this: String, RegExp, String) => String,
    indexOf: (this: String, String) => Number
}

String : (Number) => String

Boolean : (Boolean | undefined) => Boolean

Error : (this: Error, String) => void

Date : {
    now: () => Number
}

Math : {
    floor: (Number) => Number
}

parseInt : (String, Number) => Number

Object : {
    create: (parent: null) => %Object%%Empty,
    keys: <K, V>(Object<K, V>) => Array<String>
}

