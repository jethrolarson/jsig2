-- vim: set ft=Haskell:
type TTimer : {}
type TFS : {
    readFile: (
        filePath: String,
        encoding: String,
        cb: (error: Error | null, result: String) => void
    ) => void
}

type TFlamer : {
    minCyclesDuration: Number,

    handleError: (this: TFlamer, err: Error, ctx: TProcWatcher) => void,
    onCPUHot: (this: TFlamer, windowInfo: TWindowInfo) => void
}

type TProcWatcher : {
    type: String,
    flamer: TFlamer,
    pid: Number,
    cmdline: String,
    fs: TFS,
    probeInterval: Number,

    minCyclesDuration: Number,
    minTimeSlices: Number,

    filePath: String,
    nextProbe: Number,
    timer: TTimer | null,
    seenFirstRunning: Boolean,

    timeSlices: TProcInfo[],
    windowReported: Boolean,
    destroyed: Boolean,
    paused: Boolean,

    boundOnProbe: (this: TProcWatcher) => void,
    boundOnFile: (this: TProcWatcher, err: Error | null, text: String) => void,

    scheduleNextProbe: (this: TProcWatcher) => void,
    watch: (this: TProcWatcher) => void,
    onProbe: (this: TProcWatcher) => void,
    onFile: (this: TProcWatcher, err: Error | null, text: String) => void,
    destroy: (this: TProcWatcher) => void,
    reset: (this: TProcWatcher) => void,
    pause: (this: TProcWatcher) => void,
    resume: (this: TProcWatcher) => void,
    handleProcInfo: (this: TProcWatcher, procInfo: TProcInfo) => void,
    getTimeWindowInfo: (this: TProcWatcher) => TWindowInfo
}

ProcWatcher : (this: TProcWatcher, flamer: TFlamer, pid: Number, options?: {
    cmdline?: String,
    fs?: TFS
}) => void


type TProcInfo : {
    timestamp: Number,
    pid: Number,
    state: String,
    utime: Number,
    stime: Number,
    ttime: Number,
    processor: Number,
    guestTime: Number
}

ProcInfo : (
    this: TProcInfo, pid: Number, state: String, utime: String,
    stime: String, processor: String, guestTime: String
) => void

type TWindowInfo : {
    timestamp: Number,
    pid: Number,
    elapsedTime: Number,
    cpuTicks: Number,
    cmdline: String,
    uuid: String,
    filePath: null | String,
    cpuPercentage: Number
}

TimeWindowInfo : (
    this: TWindowInfo, pid: Number, elapsedTime: Number, cpuTicks: Number,
    cmdline: String
) => void
